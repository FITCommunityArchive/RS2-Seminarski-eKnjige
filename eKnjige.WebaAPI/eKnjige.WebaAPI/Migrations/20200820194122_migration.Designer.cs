// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eKnjige.WebaAPI.Data;

namespace eKnjige.WebaAPI.Migrations
{
    [DbContext(typeof(Data.AppContext))]
    [Migration("20200820194122_migration")]
    partial class migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eKnjige.WebaAPI.Autor", b =>
                {
                    b.Property<int>("AutorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Godiste")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AutorID");

                    b.ToTable("Autori");

                    b.HasData(
                        new
                        {
                            AutorID = 1,
                            Godiste = new DateTime(2020, 8, 20, 21, 41, 21, 362, DateTimeKind.Local).AddTicks(6144),
                            Ime = "Ivo",
                            Prezime = "Andric"
                        },
                        new
                        {
                            AutorID = 2,
                            Godiste = new DateTime(2020, 8, 20, 21, 41, 21, 366, DateTimeKind.Local).AddTicks(9612),
                            Ime = "George",
                            Prezime = "Martin"
                        },
                        new
                        {
                            AutorID = 3,
                            Godiste = new DateTime(2020, 8, 20, 21, 41, 21, 366, DateTimeKind.Local).AddTicks(9765),
                            Ime = "Albert",
                            Prezime = "Camus"
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.Database.Uloga", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogaId");

                    b.ToTable("Uloge");

                    b.HasData(
                        new
                        {
                            UlogaId = 1,
                            Naziv = "Administrator",
                            Opis = "Administrator"
                        },
                        new
                        {
                            UlogaId = 2,
                            Naziv = "Korisnik",
                            Opis = "Korisnik"
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.Drzava", b =>
                {
                    b.Property<int>("DrzavaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrzavaID");

                    b.ToTable("Drzave");

                    b.HasData(
                        new
                        {
                            DrzavaID = 1,
                            Naziv = "BiH"
                        },
                        new
                        {
                            DrzavaID = 2,
                            Naziv = "Engleska"
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.EKnjiga", b =>
                {
                    b.Property<int>("EKnjigaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdministratorID")
                        .HasColumnType("int");

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<bool>("MP3Dodan")
                        .HasColumnType("bit");

                    b.Property<string>("Mp3file")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("OcjenaKnjige")
                        .HasColumnType("real");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PDFDodan")
                        .HasColumnType("bit");

                    b.Property<string>("Pdffile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("EKnjigaID");

                    b.HasIndex("AdministratorID");

                    b.ToTable("EKnjige");

                    b.HasData(
                        new
                        {
                            EKnjigaID = 1,
                            AdministratorID = 1,
                            Cijena = 34f,
                            MP3Dodan = false,
                            Naziv = "Sraz kraljeva",
                            OcjenaKnjige = 5f,
                            Opis = "Opis	Nakon neočekivanog smaknuća Eddarda Starka, vazali i sljedbenici proglašavaju njegova sina Robba Kraljem na Sjeveru. Okrutni dječak Joffrey sjedi na Željeznom prijestolju i onemogućuje Stannisa i Renlyja Baratheona u pokušajima da zauzmu tron. Četiri pretendenta i samo jedna kruna! Sedam je Kraljevina na rubu razornoga građanskog rata. Krvavocrveni komet na nebu samo potvrđuje nadolazeću katastrofu.",
                            PDFDodan = true,
                            Pdffile = "George R. R. Martin 2 - Sraz kraljeva(1999.).pdf"
                        },
                        new
                        {
                            EKnjigaID = 2,
                            AdministratorID = 1,
                            Cijena = 30f,
                            MP3Dodan = false,
                            Naziv = "Na Drini ćuprija",
                            OcjenaKnjige = 4f,
                            Opis = "Godine 1516. Mehmed paša je, prema vladajućem običaju devširme (tur. prikupljanje), kao dječak pravoslavnih roditelja odveden u osmansku vojsku (tadašnje janjičare), prilikom čega je prešao na islam, da bi se kasnije uzdigao ljestvicama vlasti i postao prvi do sultana. Kao moćnik, odlučio je da u rodnom kraju podigne zadužbinu, veliki kameni most na jedanaest lukova. Roman počinje dugim geografskim opisom višegradskog kraja i navođenjem više legendi o nastanku mosta. Jedna od najpoznatijih legendi svakako je priča o blizancima Stoji i Ostoji. Porijeklo legende je u nacionalnom mitu i epskoj viziji svijeta koja je književni ekvivalent toga mita. Legende su po pravilu paralelne, imaju krišćansku i muslimansku verziju. Kraj romana pada u 1914. godinu kada su trupe austrougarske monarhije, u povlačenju, ozbiljno oštetile most. Sa rušenjem mosta izdiše i Alihodža, jedan od najčešće pominjanih likova, koji simbolizuje kraj starih vremena..",
                            PDFDodan = true,
                            Pdffile = "Ivo-Andric-Na-Drini-cuprija.pdf"
                        },
                        new
                        {
                            EKnjigaID = 3,
                            AdministratorID = 1,
                            Cijena = 25f,
                            MP3Dodan = true,
                            Mp3file = "STRANAC Alber Kami I deo I,II i III glava.mp3",
                            Naziv = "Stranac",
                            OcjenaKnjige = 5f,
                            Opis = "Psihološki roman Stranac Albert Camus objavio je 1942. godine. Ovaj je pisac unutar teorije egzistencijalizma vrhunski razvio filozofiju apsurda koju dijelimo na fazu apsurda i fazu pobune. Likovi poput Mersaulta i Sizifa ne opiru se apsurdu i ne bježe od besmislenosti života, već ga prihvaćaju i žive život po načelima teorije apsurda.",
                            PDFDodan = true,
                            Pdffile = "alber_kami_stranac.pdf"
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.EKnjigaKategorija", b =>
                {
                    b.Property<int>("EKnjigaKategorijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EKnjigaID")
                        .HasColumnType("int");

                    b.Property<int>("KategorijaID")
                        .HasColumnType("int");

                    b.HasKey("EKnjigaKategorijaID");

                    b.HasIndex("EKnjigaID");

                    b.HasIndex("KategorijaID");

                    b.ToTable("EKnjigaKategorije");

                    b.HasData(
                        new
                        {
                            EKnjigaKategorijaID = 1,
                            EKnjigaID = 1,
                            KategorijaID = 1
                        },
                        new
                        {
                            EKnjigaKategorijaID = 2,
                            EKnjigaID = 2,
                            KategorijaID = 1
                        },
                        new
                        {
                            EKnjigaKategorijaID = 3,
                            EKnjigaID = 3,
                            KategorijaID = 2
                        },
                        new
                        {
                            EKnjigaKategorijaID = 4,
                            EKnjigaID = 2,
                            KategorijaID = 3
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.EKnjigeAutor", b =>
                {
                    b.Property<int>("EKnjigeAutorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutorID")
                        .HasColumnType("int");

                    b.Property<int>("EKnjigaID")
                        .HasColumnType("int");

                    b.HasKey("EKnjigeAutorID");

                    b.HasIndex("AutorID");

                    b.HasIndex("EKnjigaID");

                    b.ToTable("EKnjigaAutori");

                    b.HasData(
                        new
                        {
                            EKnjigeAutorID = 1,
                            AutorID = 1,
                            EKnjigaID = 2
                        },
                        new
                        {
                            EKnjigeAutorID = 2,
                            AutorID = 2,
                            EKnjigaID = 1
                        },
                        new
                        {
                            EKnjigeAutorID = 3,
                            AutorID = 3,
                            EKnjigaID = 3
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrzavaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Gradovi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DrzavaId = 1,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            Id = 2,
                            DrzavaId = 1,
                            Naziv = "Bosanska Krupa"
                        },
                        new
                        {
                            Id = 3,
                            DrzavaId = 1,
                            Naziv = "Mostar"
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.Kategorija", b =>
                {
                    b.Property<int>("KategorijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KategorijaID");

                    b.ToTable("Kategorije");

                    b.HasData(
                        new
                        {
                            KategorijaID = 1,
                            Naziv = "Roman"
                        },
                        new
                        {
                            KategorijaID = 2,
                            Naziv = "Novela"
                        },
                        new
                        {
                            KategorijaID = 3,
                            Naziv = "Naucna fantastika"
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.Klijent", b =>
                {
                    b.Property<int>("KlijentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumRodenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpolID")
                        .HasColumnType("int");

                    b.Property<int>("UlogaID")
                        .HasColumnType("int");

                    b.HasKey("KlijentID");

                    b.HasIndex("GradID");

                    b.HasIndex("SpolID");

                    b.HasIndex("UlogaID");

                    b.ToTable("Klijenti");

                    b.HasData(
                        new
                        {
                            KlijentID = 1,
                            DatumRodenja = new DateTime(2020, 8, 20, 21, 41, 21, 367, DateTimeKind.Local).AddTicks(8019),
                            Email = "adminemail@gmail.com",
                            GradID = 1,
                            Ime = "AdminIme",
                            KorisnickoIme = "admin",
                            LozinkaHash = "FhbHHN34a5Ds1esUOVrfxM/3n8+X+1b5e5CaTnmPliUnx2i+dVsTEF2lX+GqfKaDTwfI7xnU8Vl27WuUC2c98w==",
                            LozinkaSalt = "9ObBmhIwc8VyvImh4iDHLw==",
                            Prezime = "AdminPrezime",
                            SpolID = 1,
                            UlogaID = 1
                        },
                        new
                        {
                            KlijentID = 3,
                            DatumRodenja = new DateTime(2020, 8, 20, 21, 41, 21, 368, DateTimeKind.Local).AddTicks(4788),
                            Email = "tarikpasalic@gmail.com",
                            GradID = 2,
                            Ime = "Tarik",
                            KorisnickoIme = "tarikpasalic",
                            LozinkaHash = "RmrxC+TxcmGNxzNj/wVlHUzuqTO58XZ4iCikUBHXNq5ra5Or2L1VWCHkoB0Lp7VJxw8N+Fo/Ss5JXJceNNqPKA==",
                            LozinkaSalt = "83VqAXdFhiIljRayFSH9aA==",
                            Prezime = "Pasalic",
                            SpolID = 1,
                            UlogaID = 2
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.KlijentKnjigaOcjena", b =>
                {
                    b.Property<int>("KlijentKnjigaOcijenaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumOcijene")
                        .HasColumnType("datetime2");

                    b.Property<int>("EKnjigaID")
                        .HasColumnType("int");

                    b.Property<int>("KlijentID")
                        .HasColumnType("int");

                    b.Property<float>("Ocjena")
                        .HasColumnType("real");

                    b.HasKey("KlijentKnjigaOcijenaID");

                    b.HasIndex("EKnjigaID");

                    b.HasIndex("KlijentID");

                    b.ToTable("KlijentKnjigaOcjene");
                });

            modelBuilder.Entity("eKnjige.WebaAPI.Komentar", b =>
                {
                    b.Property<int>("KomentarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumKomentara")
                        .HasColumnType("datetime2");

                    b.Property<int>("EKnjigaID")
                        .HasColumnType("int");

                    b.Property<int>("KlijentID")
                        .HasColumnType("int");

                    b.Property<string>("komentar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KomentarId");

                    b.HasIndex("EKnjigaID");

                    b.HasIndex("KlijentID");

                    b.ToTable("Komentari");

                    b.HasData(
                        new
                        {
                            KomentarId = 1,
                            DatumKomentara = new DateTime(2020, 8, 20, 21, 41, 21, 370, DateTimeKind.Local).AddTicks(5992),
                            EKnjigaID = 3,
                            KlijentID = 3,
                            komentar = "Komentar 1"
                        },
                        new
                        {
                            KomentarId = 2,
                            DatumKomentara = new DateTime(2020, 8, 20, 21, 41, 21, 370, DateTimeKind.Local).AddTicks(9591),
                            EKnjigaID = 3,
                            KlijentID = 3,
                            komentar = "Komentar 2"
                        },
                        new
                        {
                            KomentarId = 3,
                            DatumKomentara = new DateTime(2020, 8, 20, 21, 41, 21, 370, DateTimeKind.Local).AddTicks(9726),
                            EKnjigaID = 1,
                            KlijentID = 3,
                            komentar = "Komentar"
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.KupovinaKnjige", b =>
                {
                    b.Property<int>("KupovinaKnjigeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumKupovine")
                        .HasColumnType("datetime2");

                    b.Property<int>("EKnjigaID")
                        .HasColumnType("int");

                    b.Property<int>("KlijentID")
                        .HasColumnType("int");

                    b.HasKey("KupovinaKnjigeID");

                    b.HasIndex("EKnjigaID");

                    b.HasIndex("KlijentID");

                    b.ToTable("KupovinaKnjiga");

                    b.HasData(
                        new
                        {
                            KupovinaKnjigeID = 1,
                            DatumKupovine = new DateTime(2020, 8, 20, 21, 41, 21, 371, DateTimeKind.Local).AddTicks(1130),
                            EKnjigaID = 3,
                            KlijentID = 3
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.PrijedlogKnjiga", b =>
                {
                    b.Property<int>("PrijedlogKnjigeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KlijentID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Odgovoren")
                        .HasColumnType("bit");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PogledaoKorisnik")
                        .HasColumnType("bit");

                    b.HasKey("PrijedlogKnjigeID");

                    b.HasIndex("KlijentID");

                    b.ToTable("PrijedlogKnjiga");

                    b.HasData(
                        new
                        {
                            PrijedlogKnjigeID = 1,
                            Datum = new DateTime(2020, 8, 20, 21, 41, 21, 370, DateTimeKind.Local).AddTicks(1552),
                            KlijentID = 3,
                            Naziv = " Mesa Selimovic: Dervis i Smrt",
                            Odgovoren = false,
                            Opis = "",
                            PogledaoKorisnik = false
                        },
                        new
                        {
                            PrijedlogKnjigeID = 2,
                            Datum = new DateTime(2020, 8, 20, 21, 41, 21, 370, DateTimeKind.Local).AddTicks(5072),
                            KlijentID = 3,
                            Naziv = " Lav Tolstoj : Rat i Mir",
                            Odgovoren = true,
                            Opis = "Vaš zahtjev je odobren",
                            PogledaoKorisnik = false
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.Spol", b =>
                {
                    b.Property<int>("SpolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpolID");

                    b.ToTable("Spol");

                    b.HasData(
                        new
                        {
                            SpolID = 1,
                            Tip = "M"
                        },
                        new
                        {
                            SpolID = 2,
                            Tip = "Z"
                        });
                });

            modelBuilder.Entity("eKnjige.WebaAPI.EKnjiga", b =>
                {
                    b.HasOne("eKnjige.WebaAPI.Klijent", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKnjige.WebaAPI.EKnjigaKategorija", b =>
                {
                    b.HasOne("eKnjige.WebaAPI.EKnjiga", "Eknjiga")
                        .WithMany()
                        .HasForeignKey("EKnjigaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKnjige.WebaAPI.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKnjige.WebaAPI.EKnjigeAutor", b =>
                {
                    b.HasOne("eKnjige.WebaAPI.Autor", "Autor")
                        .WithMany()
                        .HasForeignKey("AutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKnjige.WebaAPI.EKnjiga", "EKnjiga")
                        .WithMany()
                        .HasForeignKey("EKnjigaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKnjige.WebaAPI.Grad", b =>
                {
                    b.HasOne("eKnjige.WebaAPI.Drzava", "Drzava")
                        .WithMany()
                        .HasForeignKey("DrzavaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKnjige.WebaAPI.Klijent", b =>
                {
                    b.HasOne("eKnjige.WebaAPI.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKnjige.WebaAPI.Spol", "Spol")
                        .WithMany()
                        .HasForeignKey("SpolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKnjige.WebaAPI.Database.Uloga", "Uloga")
                        .WithMany()
                        .HasForeignKey("UlogaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKnjige.WebaAPI.KlijentKnjigaOcjena", b =>
                {
                    b.HasOne("eKnjige.WebaAPI.EKnjiga", "Eknjiga")
                        .WithMany()
                        .HasForeignKey("EKnjigaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKnjige.WebaAPI.Klijent", "Klijent")
                        .WithMany()
                        .HasForeignKey("KlijentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("eKnjige.WebaAPI.Komentar", b =>
                {
                    b.HasOne("eKnjige.WebaAPI.EKnjiga", "EKnjiga")
                        .WithMany()
                        .HasForeignKey("EKnjigaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKnjige.WebaAPI.Klijent", "Klijent")
                        .WithMany()
                        .HasForeignKey("KlijentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKnjige.WebaAPI.KupovinaKnjige", b =>
                {
                    b.HasOne("eKnjige.WebaAPI.EKnjiga", "EKnjiga")
                        .WithMany()
                        .HasForeignKey("EKnjigaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKnjige.WebaAPI.Klijent", "Klijent")
                        .WithMany()
                        .HasForeignKey("KlijentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("eKnjige.WebaAPI.PrijedlogKnjiga", b =>
                {
                    b.HasOne("eKnjige.WebaAPI.Klijent", "Klijent")
                        .WithMany()
                        .HasForeignKey("KlijentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
